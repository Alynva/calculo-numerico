---
import Layout from '../layouts/Layout.astro';

---
<script is:inline type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&locale=pt-br"></script>

<Layout title="Erros em processos numéricos">
	<main>
		<h1 class="text-gradient"><a href="/calculo-numerico/">Cálculo Numérico</a></h1>
		<h2>Erros em processos numéricos</h2>
		<div class="instructions">
			<h3>Erro absoluto</h3>
			<p>É uma medida da diferença entre o valor exato e o valor aproximado de um resultado numérico. Ele fornece uma indicação direta do quão distante a aproximação está do valor real. O erro absoluto é expresso em termos da unidade de medida do problema e é calculado subtraindo-se o valor aproximado do valor exato.</p>
			{"$$\\left| p - p\\star \\right|$$"}
			<h3>Erro relativo</h3>
			<p>É uma medida do erro comparado ao tamanho do valor real. Ele é calculado dividindo-se o erro absoluto pelo valor exato. O erro relativo é uma métrica mais útil quando se quer avaliar a precisão relativa de uma aproximação em relação ao valor real, independentemente da escala do problema. É expresso como uma porcentagem ou um número decimal.</p>
			{"$$\\frac{\\left| p - p\\star \\right|}{\\left| p \\right|}$$"}
			<h3>Erro de truncamento</h3>
			<p>Ocorre quando um processo numérico envolve a aproximação ou truncamento de valores infinitos ou infinitesimais. Esse tipo de erro é inerente aos métodos numéricos e surge devido às limitações de representação e manipulação de números em sistemas computacionais. O erro de truncamento pode aumentar à medida que são realizadas operações sucessivas em cálculos numéricos, levando a diferenças entre o resultado exato e o resultado aproximado.</p>
			<h3>Erro de arredondamento</h3>
			<p>Surge devido à limitação na representação dos números reais em sistemas computacionais, que utilizam uma quantidade finita de bits para armazenar valores. Quando números reais são arredondados para se adequarem à representação disponível, ocorrem pequenas discrepâncias entre o número real e sua representação aproximada. O erro de arredondamento pode se acumular ao longo de operações matemáticas, afetando a precisão dos resultados finais. Estratégias de arredondamento são aplicadas para minimizar esse tipo de erro e controlar sua propagação.</p>
		</div>
		<div class="instructions letsplay">
			<div class="input">
				<form>
					<div>
						<span class="field-name">Expressão:</span>
						<div class="help-container">
							<input type="text" name="expression" id="expression" value="sqrt(25) - log(10000, 3 + 7) * sin(pi / 4)">
							<span>Referência: <a href="https://mathjs.org/docs/reference/constants.html#constant-reference" target="_blank" rel="noopener noreferrer">constantes</a> • <a href="https://mathjs.org/docs/reference/functions.html#arithmetic-functions" target="_blank" rel="noopener noreferrer">funções</a></span>
						</div>
					</div>
					<div>
						<span class="field-name">Modo:</span>
						<div class="radio-field">
							<input type="radio" name="mode" id="truncar" value="truncar" checked>
							<label for="truncar">Truncar</label>
							<input type="radio" name="mode" id="arredondar" value="arredondar">
							<label for="arredondar">Arredondar</label>
						</div>
					</div>
					<div>
						<span class="field-name">Precisão:</span>
						<input type="number" name="precision" id="precision" value="5" step=1 min=1 max=100>
					</div>
				</form>
			</div>
			<hr>
			<div class="output">
				<div class="display" id="real">
					<span class="value"></span>
					<span class="text">Real</span>
				</div>
				<div class="display" id="calculated">
					<span class="value shakeY"></span>
					<span class="text">Calculado</span>
				</div>
				<div class="display" id="erro_abs">
					<span class="value"></span>
					<span class="text">Erro Absoluto</span>
				</div>
				<div class="display" id="erro_rel">
					<span class="value"></span>
					<span class="text">Erro Relativo</span>
				</div>
			</div>
		</div>
	</main>
</Layout>

<script>
	import { all, create, evaluateDependencies } from 'mathjs'
	import truncar from '../utils/truncar'

	let EXPRESSAO = '1.2345 + 686.9'
	let LIMIT = 2
	const MODES = {
		ARREDONDAR: 0,
		TRUNCAR: 1,
	}
	let MODE = MODES.TRUNCAR

	function cap(v: number) {
		if (MODE === MODES.ARREDONDAR) {
			return arredondar(v, LIMIT)
		} else if (MODE === MODES.TRUNCAR) {
			return truncar(v, LIMIT)
		}
		return v
	}

	function arredondar(v: number, limit: number) {
		return Number(v.toPrecision(limit))
	}
	const add = (a: number, b: number) => cap(cap(a) + cap(b))
	const subtract = (a: number, b: number) => cap(cap(a) - cap(b))
	const multiply = (a: number, b: number) => cap(cap(a) * cap(b))
	const divide = (a: number, b: number) => cap(cap(a) / cap(b))

	const math = create(all)

	math.import({ add, subtract, multiply, divide }, { override: true })

	document.querySelector("form")
		?.addEventListener("submit", evt => evt.preventDefault())

	document.querySelectorAll("form input")
		?.forEach(elem => {
			elem.addEventListener("change", evt => handleChange((evt.target as HTMLFormElement)?.form))
			elem.addEventListener("keyup", evt => handleChange((evt.target as HTMLFormElement)?.form))
		})

	function handleChange(form?: HTMLFormElement) {
		if (!form) form = document.querySelector("form") || undefined
		if (!form) return

		const data = Object.fromEntries(new FormData(form))
		const { expression, mode, precision } = data

		EXPRESSAO = expression.toString()
		MODE = MODES[mode.toString().toUpperCase() as "ARREDONDAR" | "TRUNCAR"]
		LIMIT = Number(precision.toString())

		const calculated = Number(cap(math.evaluate(EXPRESSAO)))
		setValue(".output #calculated .value", ''+calculated)
		animate(".output #calculated .value")

		MODE = -1
		const real = Number(cap(math.evaluate(EXPRESSAO)))
		setValue(".output #real .value", ''+real)

		const errorAbsolute = Math.abs(real - calculated)
		setValue(".output #erro_abs .value", ''+errorAbsolute.toExponential())
		const errorRelative = errorAbsolute / Math.abs(real)
		setValue(".output #erro_rel .value", ''+errorRelative.toExponential())
	}
	handleChange()

	function setValue(selector: string, value: string) {
		const elem = document.querySelector(selector) as HTMLElement

		if (elem) elem.innerText = value
	}
	function animate(selector: string) {
		const elem = document.querySelector(selector) as HTMLElement

		if (!elem) return

		elem.classList.remove("shakeY")
		elem.classList.add("shakeY")

		function removeAnimation() {
			elem.classList.remove("shakeY")
			elem.removeEventListener("animationend", removeAnimation)
		}
		elem.addEventListener("animationend", removeAnimation)
	}
</script>

<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 700px;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
	.letsplay {
		--radius: 3px;
	}
	.letsplay, .letsplay .input form, .letsplay .output {
		display: flex;
		flex-direction: column;
	}
	.letsplay .input form {
		gap: 5px;
	}
	.letsplay .input form > div {
		display: flex;
		align-items: center;
		gap: 15px;
	}
	.letsplay .input .field-name {
		width: 100px;
		text-align: right;
	}
	.radio-field {
		display: flex;
	}
	.radio-field input[type=radio] {
		display: none;
	}
	.radio-field label, .letsplay input {
		padding: 4px 7px;
		font-size: 1em;
		font-weight: 100;
	}
	.radio-field label {
		cursor: pointer;
		background-color: #ccc;
		color: rgb(var(--accent));
	}
	.radio-field label:first-of-type { border-radius: var(--radius) 0 0 var(--radius); }
	.radio-field label:last-of-type { border-radius: 0 var(--radius) var(--radius) 0; }

	.radio-field input[type=radio]:checked + label {
		background-color: rgb(var(--accent));
		color: white
	}
	.letsplay input {
		border-radius: var(--radius);
		border: 1px solid rgb(var(--accent));
	}
	.letsplay .input .help-container {
		display: flex;
		flex-direction: column;
		flex: 1;
	}
	.letsplay .input .help-container span {
		font-size: .8em;
	}
	.letsplay input#expression {
		flex: 1;
	}
	.letsplay .output {
		flex-direction: row;
		justify-content: center;
		gap: 50px;
	}
	.letsplay .output .display {
		display: flex;
		flex-direction: column;
		align-items: center;
	}
	.letsplay .output .display .value {
		font-weight: bolder;
		font-size: 1.5em;
		color: rgb(var(--accent));
	}
	.letsplay .output .display .text {
		color: rgb(var(--accent));
	}
	.letsplay .output {
		flex-flow: wrap;
	}
	hr {
		width: 100%;
	}
	h1 + h2, h3:first-child {
		margin-top: 0;
	}


	@keyframes shakeY {
		0%,to {
			-webkit-transform: translateZ(0);
			transform: translateZ(0)
		}

		10%,30%,50%,70%,90% {
			-webkit-transform: translate3d(0,-10px,0);
			transform: translate3d(0,-10px,0)
		}

		20%,40%,60%,80% {
			-webkit-transform: translate3d(0,10px,0);
			transform: translate3d(0,10px,0)
		}
	}

	.shakeY {
		animation-name: shakeY;

    animation-duration: 1s;
    animation-fill-mode: both
	}
</style>
