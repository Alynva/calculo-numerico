---
import LetsPlay from '../components/LetsPlay.astro';
import Layout from '../layouts/Layout.astro';

---
<script is:inline type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&locale=pt-br"></script>

<Layout title="Erros em processos numéricos">
	<main>
		<h1 class="text-gradient"><a href="/calculo-numerico/">Cálculo Numérico</a></h1>
		<h2>Erros em processos numéricos</h2>
		<div class="instructions">
			<h3>Erro absoluto</h3>
			<p>É uma medida da diferença entre o valor exato e o valor aproximado de um resultado numérico. Ele fornece uma indicação direta do quão distante a aproximação está do valor real. O erro absoluto é expresso em termos da unidade de medida do problema e é calculado subtraindo-se o valor aproximado do valor exato.</p>
			{"$$\\left| p - p\\star \\right|$$"}
			<h3>Erro relativo</h3>
			<p>É uma medida do erro comparado ao tamanho do valor real. Ele é calculado dividindo-se o erro absoluto pelo valor exato. O erro relativo é uma métrica mais útil quando se quer avaliar a precisão relativa de uma aproximação em relação ao valor real, independentemente da escala do problema. É expresso como uma porcentagem ou um número decimal.</p>
			{"$$\\frac{\\left| p - p\\star \\right|}{\\left| p \\right|}$$"}
			<h3>Erro de truncamento</h3>
			<p>Ocorre quando um processo numérico envolve a aproximação ou truncamento de valores infinitos ou infinitesimais. Esse tipo de erro é inerente aos métodos numéricos e surge devido às limitações de representação e manipulação de números em sistemas computacionais. O erro de truncamento pode aumentar à medida que são realizadas operações sucessivas em cálculos numéricos, levando a diferenças entre o resultado exato e o resultado aproximado.</p>
			<h3>Erro de arredondamento</h3>
			<p>Surge devido à limitação na representação dos números reais em sistemas computacionais, que utilizam uma quantidade finita de bits para armazenar valores. Quando números reais são arredondados para se adequarem à representação disponível, ocorrem pequenas discrepâncias entre o número real e sua representação aproximada. O erro de arredondamento pode se acumular ao longo de operações matemáticas, afetando a precisão dos resultados finais. Estratégias de arredondamento são aplicadas para minimizar esse tipo de erro e controlar sua propagação.</p>
		</div>
		<LetsPlay>
			<div slot="input">
				<span class="field-name">Expressão:</span>
				<div class="help-container">
					<input type="text" name="expression" id="expression" value="sqrt(25) - log(10000, 3 + 7) * sin(pi / 4)">
					<span>Referência: <a href="https://mathjs.org/docs/reference/constants.html#constant-reference" target="_blank" rel="noopener noreferrer">constantes</a> • <a href="https://mathjs.org/docs/reference/functions.html#arithmetic-functions" target="_blank" rel="noopener noreferrer">funções</a></span>
				</div>
			</div>
			<div slot="input">
				<span class="field-name">Modo:</span>
				<div class="radio-field">
					<input type="radio" name="mode" id="truncar" value="truncar" checked>
					<label for="truncar">Truncar</label>
					<input type="radio" name="mode" id="arredondar" value="arredondar">
					<label for="arredondar">Arredondar</label>
				</div>
			</div>
			<div slot="input">
				<span class="field-name">Precisão:</span>
				<input type="number" name="precision" id="precision" value="5" step=1 min=1 max=100>
			</div>

			<div slot="output" class="display" id="real">
				<span class="value"></span>
				<span class="text">Real</span>
			</div>
			<div slot="output" class="display" id="calculated">
				<span class="value shakeY"></span>
				<span class="text">Calculado</span>
			</div>
			<div slot="output" class="display" id="erro_abs">
				<span class="value"></span>
				<span class="text">Erro Absoluto</span>
			</div>
			<div slot="output" class="display" id="erro_rel">
				<span class="value"></span>
				<span class="text">Erro Relativo</span>
			</div>
		</LetsPlay>
	</main>
</Layout>

<script>
	import { all, create, evaluateDependencies } from 'mathjs'
	import truncar from '../utils/truncar'
	import arredondar from '../utils/arredondar'

	let EXPRESSAO = '1.2345 + 686.9'
	let LIMIT = 2
	const MODES = {
		ARREDONDAR: 0,
		TRUNCAR: 1,
	}
	let MODE = MODES.TRUNCAR

	function cap(v: number) {
		if (MODE === MODES.ARREDONDAR) {
			return arredondar(v, LIMIT)
		} else if (MODE === MODES.TRUNCAR) {
			return truncar(v, LIMIT)
		}
		return v
	}

	
	const add = (a: number, b: number) => cap(cap(a) + cap(b))
	const subtract = (a: number, b: number) => cap(cap(a) - cap(b))
	const multiply = (a: number, b: number) => cap(cap(a) * cap(b))
	const divide = (a: number, b: number) => cap(cap(a) / cap(b))

	const math = create(all)

	math.import({ add, subtract, multiply, divide }, { override: true })

	document.querySelectorAll("form input")
		?.forEach(elem => {
			elem.addEventListener("change", evt => handleChange((evt.target as HTMLFormElement)?.form))
			elem.addEventListener("keyup", evt => handleChange((evt.target as HTMLFormElement)?.form))
		})

	function handleChange(form?: HTMLFormElement) {
		if (!form) form = document.querySelector("form") || undefined
		if (!form) return

		const data = Object.fromEntries(new FormData(form))
		const { expression, mode, precision } = data

		EXPRESSAO = expression.toString()
		MODE = MODES[mode.toString().toUpperCase() as "ARREDONDAR" | "TRUNCAR"]
		LIMIT = Number(precision.toString())

		const calculated = Number(cap(math.evaluate(EXPRESSAO)))
		setValue(".output #calculated .value", ''+calculated)
		animate(".output #calculated .value")

		MODE = -1
		const real = Number(cap(math.evaluate(EXPRESSAO)))
		setValue(".output #real .value", ''+real)

		const errorAbsolute = Math.abs(real - calculated)
		setValue(".output #erro_abs .value", ''+errorAbsolute.toExponential())
		const errorRelative = errorAbsolute / Math.abs(real)
		setValue(".output #erro_rel .value", ''+errorRelative.toExponential())
	}
	handleChange()

	function setValue(selector: string, value: string) {
		const elem = document.querySelector(selector) as HTMLElement

		if (elem) elem.innerText = value
	}
	function animate(selector: string) {
		const elem = document.querySelector(selector) as HTMLElement

		if (!elem) return

		elem.classList.remove("shakeY")
		elem.classList.add("shakeY")

		function removeAnimation() {
			elem.classList.remove("shakeY")
			elem.removeEventListener("animationend", removeAnimation)
		}
		elem.addEventListener("animationend", removeAnimation)
	}
</script>

